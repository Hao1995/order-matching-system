// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package matchingengine

import (
	"errors"
	"fmt"
)

const (
	// MatchingTypeCreate is a MatchingType of type Create.
	MatchingTypeCreate MatchingType = "Create"
	// MatchingTypeCancel is a MatchingType of type Cancel.
	MatchingTypeCancel MatchingType = "Cancel"
)

var ErrInvalidMatchingType = errors.New("not a valid MatchingType")

// String implements the Stringer interface.
func (x MatchingType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MatchingType) IsValid() bool {
	_, err := ParseMatchingType(string(x))
	return err == nil
}

var _MatchingTypeValue = map[string]MatchingType{
	"Create": MatchingTypeCreate,
	"Cancel": MatchingTypeCancel,
}

// ParseMatchingType attempts to convert a string to a MatchingType.
func ParseMatchingType(name string) (MatchingType, error) {
	if x, ok := _MatchingTypeValue[name]; ok {
		return x, nil
	}
	return MatchingType(""), fmt.Errorf("%s is %w", name, ErrInvalidMatchingType)
}

// MarshalText implements the text marshaller method.
func (x MatchingType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MatchingType) UnmarshalText(text []byte) error {
	tmp, err := ParseMatchingType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// OrderTypeBuy is a OrderType of type Buy.
	OrderTypeBuy OrderType = "Buy"
	// OrderTypeSell is a OrderType of type Sell.
	OrderTypeSell OrderType = "Sell"
)

var ErrInvalidOrderType = errors.New("not a valid OrderType")

// String implements the Stringer interface.
func (x OrderType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x OrderType) IsValid() bool {
	_, err := ParseOrderType(string(x))
	return err == nil
}

var _OrderTypeValue = map[string]OrderType{
	"Buy":  OrderTypeBuy,
	"Sell": OrderTypeSell,
}

// ParseOrderType attempts to convert a string to a OrderType.
func ParseOrderType(name string) (OrderType, error) {
	if x, ok := _OrderTypeValue[name]; ok {
		return x, nil
	}
	return OrderType(""), fmt.Errorf("%s is %w", name, ErrInvalidOrderType)
}

// MarshalText implements the text marshaller method.
func (x OrderType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *OrderType) UnmarshalText(text []byte) error {
	tmp, err := ParseOrderType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
