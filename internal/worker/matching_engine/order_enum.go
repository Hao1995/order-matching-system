// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package matchingengine

import (
	"errors"
	"fmt"
)

const (
	// SideBUY is a Side of type BUY.
	SideBUY Side = iota
	// SideSELL is a Side of type SELL.
	SideSELL
)

var ErrInvalidSide = errors.New("not a valid Side")

const _SideName = "BUYSELL"

var _SideMap = map[Side]string{
	SideBUY:  _SideName[0:3],
	SideSELL: _SideName[3:7],
}

// String implements the Stringer interface.
func (x Side) String() string {
	if str, ok := _SideMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Side(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Side) IsValid() bool {
	_, ok := _SideMap[x]
	return ok
}

var _SideValue = map[string]Side{
	_SideName[0:3]: SideBUY,
	_SideName[3:7]: SideSELL,
}

// ParseSide attempts to convert a string to a Side.
func ParseSide(name string) (Side, error) {
	if x, ok := _SideValue[name]; ok {
		return x, nil
	}
	return Side(0), fmt.Errorf("%s is %w", name, ErrInvalidSide)
}

// MarshalText implements the text marshaller method.
func (x Side) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Side) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseSide(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
